# /!\ Autogenerated code, modifications will be lost /!\
# see `scripts/generate_tmpl.py`

from collections.abc import Mapping, Sequence
from enum import Enum

from ._builtins import *

{%- macro render_arg(arg) -%}
{{ "{}: ".format(arg.name) }}
{%- if arg.type.py_type == "GDString" %}
GDString | str
{%- elif arg.type.py_type == "StringName" %}
StringName | str
{%- elif arg.type.py_type == "NodePath" %}
NodePath | str
{%- elif arg.type.py_type == "GDList" %}
GDList | Sequence[IntoGDAny]
{%- elif arg.type.py_type == "GDDictionary" %}
GDDictionary | Mapping[IntoGDAny, IntoGDAny]
{%- else %}
{{ arg.type.py_type }}
{%- endif %}
{%- if arg.default_value is not none %}
 = {{ arg.default_value.py_value }}
{%- endif %}
{%- endmacro %}

{%- macro render_ret(ret) -%}
{{ "None" if ret.is_nil else ret.py_type }}
{%- endmacro %}

{% for spec in api["classes"] %}


class {{spec.name}}({{ spec.inherits or "" }}):
{%   set ns = namespace(contains_something=false) %}
{%   if spec.is_instantiable %}
{%     set ns.contains_something = True %}
{%     if spec.is_refcounted %}
    def __init__(self): ...
{%     else %}
    @classmethod
    def new(cls) -> {{ spec.name }}: ...
{%     endif %}
{%   endif %}
{%   for e in spec.enums %}
{%     if loop.first %}
{%       set ns.contains_something = True %}

    # Enums
{%     endif %}
    class {{ e.name }}(Enum):
{%     for ev in e.values.keys() %}
        {{ ev }}: int
{%     endfor %}
{%   endfor %}
{%   for m in spec.methods if not m.name.startswith("_") %}
{%     if loop.first %}
{%       set ns.contains_something = True %}

    # Methods
{%     endif %}
    def {{ m.name }}(self{% for a in m.arguments %}, {{ render_arg(a) }}{% endfor %}) -> {{ render_ret(m.return_type) }}: ...
{%   endfor %}
{%   for s in spec.signals %}
{%     if loop.first %}
{%       set ns.contains_something = True %}

    # Signals
{%     endif %}
    def {{ s.name }}(self{% for a in s.arguments %}, {{ render_arg(a) }}{% endfor %}) -> None: ...
{%   endfor %}
{%   for p in spec.properties %}
{%     if loop.first %}
{%       set ns.contains_something = True %}

    # Properties
{%     endif %}
    {{ p.name }}: {{ p.type.py_type }}
{%   endfor %}
{%   for c in spec.constants %}
{%     if loop.first %}
{%       set ns.contains_something = True %}

    # Constants
{%     endif %}
    {{ c }}: int
{%   endfor %}
{%   if not ns.contains_something %}
    pass
{%   endif %}
{% endfor %}
