{% macro render_default_constructor(builtin) -%}
{% if builtin.is_transparent_builtin %}

def __cinit__(self,
{%- for m in builtin.c_struct_members -%}
{{ m.type.cy_type }} {{ m.name }}{{ "" if m.type.is_scalar else " not None" }}={{ "0" if m.type.is_scalar else "{}()".format(m.type.cy_type) }},
{%- endfor -%}
):
{%   for m in builtin.c_struct_members %}
    self._gd_data.{{ m.name }} = {{ m.name }}{{ "" if m.type.is_scalar else "._gd_data" }}
{%   endfor %}

{% else %}

{# Opaque builtin, initialize with default empty constructor #}
def __cinit__(self):
    self._gd_data = {{ builtin.c_name_prefix }}_new()

{% endif %}
{%- endmacro %}


{% macro render_constructors(builtin) -%}
{# Default constructor #}
{% if builtin.original_name != "String" and not builtin.is_packed_array %}
{{ render_default_constructor(builtin) }}
{% endif %}

{# And now for the custom constructors ! #}

{% if builtin.original_name == "String" %}

def __cinit__(self, s=None):
    cdef GDNativeTypePtr[1] args
    if s is None:
        self._gd_data = {{ builtin.c_name_prefix }}_new()
    elif isinstance(s, str):
        self._gd_data = gd_string_from_unchecked_pystr(s)
    else:
        try:
            {% set constructor = builtin.get_constructor_from("String") %}
            self._gd_data = {{ constructor.c_name }}(&(<GDString?>s)._gd_data)
        except TypeError:
            try:
                {% set constructor = builtin.get_constructor_from("StringName") %}
                self._gd_data = {{ constructor.c_name }}(&(<StringName?>s)._gd_data)
            except TypeError:
                {% set constructor = builtin.get_constructor_from("NodePath") %}
                self._gd_data = {{ constructor.c_name }}(&(<NodePath?>s)._gd_data)

{% elif builtin.is_packed_array %}

{#
PackedByteArray
PackedInt32Array
PackedInt64Array
PackedFloat32Array
PackedFloat64Array
PackedStringArray
PackedVector2Array
PackedVector3Array
PackedColorArray
#}
def __cinit__(self, from_=None):
    cdef GDNativeTypePtr[1] args
    # TODO: finish me !
    if isinstance(from_, (list, tuple)):
        raise NotImplementedError("Not implemented yet :'(")
    if from_ is None:
        self._gd_data = {{ builtin.c_name_prefix }}_new()
    try:
        {% set constructor = builtin.get_constructor_from(builtin.original_name) %}
        self._gd_data = {{ constructor.c_name }}(&(<{{ builtin.cy_type }}?>from_)._gd_data)
    except TypeError:
        {% set constructor = builtin.get_constructor_from("Array") %}
        self._gd_data = {{ constructor.c_name }}(&(<GDArray?>from_)._gd_data)

{% endif %}

{% endmacro %}
