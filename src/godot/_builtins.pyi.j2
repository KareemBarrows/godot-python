# /!\ Autogenerated code, modifications will be lost /!\
# see `scripts/generate_tmpl.py`


class GDObject:
    ...


# GDAny represent any type that can be send to / retreive from Godot
# (i.e. it is all the types than can be converted to a Godot Variant)
GDAny = None | GDObject | {{ api["builtins"] | map(attribute="name") | join(" | ") }}

{% macro render_arg(arg) -%}
{{arg.name}}: {{ arg.type.py_type if arg.type.py_type != "GDString" else "GDString | str"}}{{ "={}".format(arg.default_value.value) if arg.default_value is not none }}
{%- endmacro %}

{% for spec in api["builtins"] if not spec.is_scalar %}

class {{spec.name}}:
{% for c in spec.constructors %}
    def __init__(self{% for a in c.arguments %}, {{ render_arg(a) }}{% endfor %}): ...
{% endfor %}
{% if spec.members %}
    # Members
{% endif %}
{% for m in spec.members %}
    {{m.name}}: {{ m.type.py_type }}
{% endfor %}
{% if spec.methods %}
    # Methods
{% endif %}
{% for m in spec.methods %}
    def {{m.name}}(self{% for a in m.arguments %}, {{ render_arg(a) }}{% endfor %}) -> {{ "None" if m.return_type.is_nil else m.return_type.py_type }}: ...
{% endfor %}
{% if spec.constants %}
    # Constants
{% endif %}
{% for c in spec.constants %}
    {{c.name}}: {{c.type.py_type}}
{% endfor %}

{% endfor %}
