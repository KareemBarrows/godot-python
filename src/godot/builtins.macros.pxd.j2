#########################################################################
# Render method
#########################################################################


{% macro render_method_signature(spec, m) -%}
{{ "void" if m.return_type.is_nil else m.return_type.cy_type }} {{ m.name }}(self
{%- for arg in m.arguments -%}
, {{ arg.type.cy_type }} {{ arg.name }}
{%- endfor -%})
{%- endmacro %}


{% macro render_method(spec, m) %}
cpdef inline {{ render_method_signature(spec, m) }}:
{%   if m.contains_unsuported_types %}
    raise NotImplementedError  # TODO
{%   else %}
{#  Return type #}
{%   if m.return_type.is_nil %}
{%   elif m.return_type.is_scalar %}
    cdef {{ m.return_type.cy_type }} ret = 0
{%   elif m.return_type.is_builtin %}
    # Call to __new__ bypasses __init__ constructor
    cdef {{ m.return_type.cy_type }} ret = {{ m.return_type.cy_type }}.__new__({{ m.return_type.cy_type }})
{%   endif %}
{#  Arguments #}
{%   if (m.arguments | length) != 0 %}
    cdef GDNativeTypePtr[{{ m.arguments | length }}] args = [
{%     for arg in m.arguments %}
{%       if arg.type.is_scalar %}
        &{{ arg.name }},
{%       else %}
        &{{ arg.name }}._gd_data,
{%       endif %}
{%     endfor %}
    ]
{%   endif %}
{#  Actual call ! #}
    __{{ spec.name }}_meth_{{ m.name }}(
{#      GDNativeTypePtr p_base #}
        &self._gd_data,
{#      const GDNativeTypePtr *p_args #}
        {{ "NULL" if (m.arguments | length) == 0 else "args" }},
{#      GDNativeTypePtr r_return #}
{%   if m.return_type.is_nil %}
        NULL,
{%   elif m.return_type.is_scalar %}
        &ret,
{%   elif m.return_type.is_builtin %}
        &ret._gd_data,
{%   endif %}
{#      int p_argument_count #}
        {{ m.arguments | length }},
    )
{%   if not m.return_type.is_nil %}
    return ret
{%   endif %}
{%   endif %}
{% endmacro %}


#########################################################################
# Render member
#########################################################################


{% macro render_member_getter_signature(spec, m) -%}
{{ m.type.cy_type }} get_{{ m.name }}(self)
{%- endmacro %}


{% macro render_member_setter_signature(spec, m) -%}
void set_{{ m.name }}(self, {{ m.type.cy_type }} val)
{%- endmacro %}


{% macro render_member(spec, m) %}
{% if not m.is_in_struct %}
{# Property unrelated to the builtin internal structure, must use Godot API method to access it #}
{%   if m.type.is_scalar %}
{# Scalar type accessed by property (unused in extension_api.json afaik) #}
cdef inline {{ render_member_getter_signature(spec, m) }}:
    cdef {{ m.type.c_type }} ret
    __{{ spec.name }}_get_{{ m.name }}(&self._gd_data, &ret)
    return ret
cdef inline {{ render_member_setter_signature(spec,m )}}:
    __{{ spec.name }}_set_{{ m.name }}(&self._gd_data, &val)
{%   else %}
{# Builtin type in the C structure (i.e. `Rect2i.end`) #}
cdef inline {{ render_member_getter_signature(spec, m) }}:
    # Call to __new__ bypasses __init__ constructor
    cdef {{ m.type.cy_type }} ret = {{ m.type.cy_type }}.__new__({{ m.type.cy_type }})
    __{{ spec.name }}_get_{{ m.name }}(&self._gd_data, &ret._gd_data)
    return ret
cdef inline {{ render_member_setter_signature(spec,m )}}:
    __{{ spec.name }}_set_{{ m.name }}(&self._gd_data, &val._gd_data)
{%   endif %}
{% endif %}
{% endmacro %}
