from collections.abc import Mapping, Sequence
from enum import Enum

from .classes import GDObject


# GDany represent any type that can be send to / retreive from Godot
# (i.e. it is all the types than can be converted to a Godot Variant)
GDAny = (
    None |
    GDObject |
    bool |
    int |
    float |
{% for builtin in api.builtins %}
    {{ builtin.py_type }}{{ "" if loop.last else " |" }}
{% endfor %}
)
# For convenience, we allow using Python types where Godot ones are needed.
# This allows for instance to do `my_node.do("foo")` instead of the infamous
# `my_node.do(GDString("foo"))`.
# Of course keep in mind this involves types conversion and is slower than only working
# with Godot types (for instance to speed up the previous example, `GDString("foo")`
# should be instantiated once and reused between `my_node.do(...)` calls)
IntoGDAny = GDAny | str | Mapping[IntoGDAny, IntoGDAny] | Sequence[IntoGDAny]

{%- macro render_arg(arg) -%}
{{ "{}: ".format(arg.name) }}
{%- if arg.type.original_name == "String" %}
{{ arg.type.py_type }} | str
{%- elif arg.type.original_name == "StringName" %}
{{ arg.type.py_type }} | str
{%- elif arg.type.original_name == "NodePath" %}
{{ arg.type.py_type }} | str
{%- elif arg.type.original_name == "List" %}
{{ arg.type.py_type }} | Sequence[IntoGDAny]
{%- elif arg.type.original_name == "Dictionary" %}
{{ arg.type.py_type }} | Mapping[IntoGDAny, IntoGDAny]
{%- elif arg.type.original_name == "Variant" %}
IntoGDAny
{%- else %}
{{ arg.type.py_type }}
{%- endif %}
{%- if arg.default_value is not none %}
 = {{ arg.default_value.py_value }}
{%- endif %}
{%- endmacro %}


##############################################################################
#                              Global constants                              #
##############################################################################


{% for builtin in api.global_constants %}
{{ builtin.name }}: {{ builtin.py_type }}
{% endfor %}


##############################################################################
#                                Global enums                                #
##############################################################################
{% for enum in api.global_enums %}


class {{ enum.original_name }}(Enum):
{%   for key in enum.values.keys() %}
    {{ key }}: int
{%   endfor %}
{% endfor %}


##############################################################################
#                              Utility functions                             #
##############################################################################


{% for utility in api.utility_functions %}
def {{ utility.name }}(
{%-     for arg in utility.arguments -%}
    {{ render_arg(arg) }}
{%-     if not loop.last -%}, {% endif %}
{%     endfor -%}
) -> {{ "None" if utility.return_type.is_nil else utility.return_type.py_type }}: ...
{% endfor %}


##############################################################################
#                                  Builtins                                  #
##############################################################################
{% for builtin in api.builtins %}
{% for e in builtin.enums %}


class {{ e.original_name }}(Enum):
{%   for key in e.values.keys() %}
    {{ key }}: int
{%   endfor %}
{% endfor %}


class {{ builtin.cy_type }}:
{%   for c in builtin.constructors %}
{#  TODO: merged together the constructors ! #}
    def __init__(self{% for a in c.arguments %}, {{ render_arg(a) }}{% endfor %}): ...
{%   endfor %}
{%   if builtin.members %}

    def clone(self) -> {{ builtin.py_type }}: ...

    # Members
{%   endif %}
{%   for m in builtin.members %}
    {{m.name}}: {{ m.type.py_type }}
{%   endfor %}
{%   if builtin.methods %}

    # Methods
{%   endif %}
{%   for m in builtin.methods %}
    def {{m.name}}(self{% for a in m.arguments %}, {{ render_arg(a) }}{% endfor %}) -> {{ "None" if m.return_type.is_nil else m.return_type.py_type }}: ...
{%   endfor %}
{%   if builtin.constants %}

    # Constants
{%   endif %}
{%   for c in builtin.constants %}
    {{c.name}}: {{c.type.py_type}}
{%   endfor %}
{% endfor %}
