{% from 'builtins_pxd/class.pxd.j2' import render_class, render_class_resume with context %}
cimport cython

from .hazmat.gdapi cimport *
from .classes cimport GDObject


cdef inline GDString ensure_is_gdstring(object gdstring_or_pystr):
    cdef GDString gdstring_converted
    try:
        return <GDString?>gdstring_or_pystr
    except TypeError:
        try:
            return GDString(gdstring_or_pystr)
        except TypeError:
            raise TypeError(f"Invalid value {gdstring_or_pystr!r}, must be str or GDString")


cdef inline NodePath ensure_is_nodepath(object nodepath_or_pystr):
    cdef NodePath NodePath_converted
    try:
        return <NodePath?>nodepath_or_pystr
    except TypeError:
        try:
            return NodePath(nodepath_or_pystr)
        except TypeError:
            raise TypeError(f"Invalid value {nodepath_or_pystr!r}, must be str or NodePath")
{% for spec in api.builtins %}


{{ render_class(spec) }}
{% endfor %}
