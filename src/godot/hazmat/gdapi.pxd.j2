from libc.stdint cimport *

from .gdnative_interface cimport *


cdef extern from * nogil:
    # Global variables defined in `pythonscript.c`
    # Given `libpythonscript.so` is responsible for initializing the Python
    # interpreter, we are guanteed `pythonscript_gdapi` symbol is always
    # resolved and set to a non-null value \o/
    """
    #include <godot/gdnative_interface.h>
    #ifdef _WIN32
    # define DLL_IMPORT __declspec(dllimport)
    #else
    # define DLL_IMPORT
    #endif
    DLL_IMPORT extern const GDNativeInterface *pythonscript_gdapi;
    """

    cdef const GDNativeInterface *pythonscript_gdapi


# The following is pretty verbose, here is the tl;dr:
# - Utility functions exposed as both function pointer and nicer inline function
# - Builtins as C structure (with typed fields if the structure is not opaque)
# - Builtins' constructors/destructor/methods/operators exposed as function pointer
#   and nicer inline function


##############################################################################
#                              Utility functions                             #
##############################################################################
{% for spec in api["utility_functions"] %}

# {{ spec.name }}
cdef GDNativePtrUtilityFunction __utility_{{ spec.name }}
cdef inline {{ "void" if spec.return_type.is_nil else spec.return_type.c_type }} {{ spec.name }}(
{%-     for arg in spec.arguments -%}
    {{ arg.type.c_type }}* {{ arg.name }}
{%-     if not loop.last -%}, {% endif %}
{%     endfor -%}
):
    cdef GDNativeTypePtr[{{ spec.arguments | length }}] p_args = [{% for arg in spec.arguments %}{{ arg.name }},{% endfor %}]
{%     if not spec.return_type.is_nil %}
    cdef {{ spec.return_type.c_type }} r_return
{%     endif %}
    __utility_{{ spec.name }}(
        {# GDNativeTypePtr r_return #}
        {{ "NULL" if spec.return_type.is_nil else "&r_return" }},
        {# const GDNativeTypePtr *p_arguments #}
        p_args,
        {# int p_argument_count #}
        {{ spec.arguments | length }}
    )
{%     if not spec.return_type.is_nil %}
    return r_return
{%     endif %}
{% endfor %}


##############################################################################
#                                  Builtins                                  #
##############################################################################

cdef struct C_Variant:
    char _gd_opaque[{{ api.variant_size }}]

{% for spec in api["builtins"] if not spec.is_scalar %}

##############################################################################
#{{ "{:^76}".format(spec.name) }}#
##############################################################################

{#
    Builtins C struct
#}
cdef struct {{ spec.c_struct_name }}:
{%   set c_struct_members = spec.c_struct_members %}
{%   if c_struct_members %}
{%     for member in c_struct_members %}
    {{ member.type.c_type }} {{ member.name }}
{%     endfor %}
{%   else %}
    char _gd_opaque[{{ spec.size }}]
{%   endif %}

{#
    Builtins C method function ptrs
#}
{%   for c in spec.constructors %}
cdef GDNativePtrConstructor __{{ spec.name }}_constructor_{{ c.index }}
{%   endfor %}
{%   if spec.has_destructor %}
cdef GDNativePtrDestructor __{{ spec.name }}_destructor
{%   endif %}
{%   for m in spec.methods %}
cdef GDNativePtrBuiltInMethod __{{ spec.name }}_meth_{{ m.name }}
{%   endfor %}
{%   for o in spec.operators %}
cdef GDNativePtrOperatorEvaluator __{{ spec.name }}_op_{{ o.name }}
{%   endfor %}
{%   for m in spec.members %}
{%     if not m.is_in_struct %}
cdef GDNativePtrSetter __{{ spec.name }}_get_{{ m.name }}
cdef GDNativePtrGetter __{{ spec.name }}_set_{{ m.name }}
{%     endif %}
{%   endfor %}
{#
    Builtins methods as inline functions
#}
{%   for meth in spec.methods if meth.offest is not none %}

cdef inline {{ "void" if meth.return_type.is_nil else meth.return_type.c_type }} {{ spec.name | lower }}_{{ meth.name }}(
    {{ spec.c_struct_name }} *self,
{%     for arg in meth.arguments %}
    {{ arg.type.c_type }}* {{ arg.name }},
{%     endfor %}
):
    cdef GDNativeTypePtr[{{ meth.arguments | length }}] p_args = [{% for arg in meth.arguments %}{{ arg.name }},{% endfor %}]
{%     if not meth.return_type.is_nil %}
    cdef {{ meth.return_type.c_type }} r_return
{%     endif %}
    __{{ spec.name }}_meth_{{ meth.name }}(
        {# GDNativeTypePtr p_base #}
        self,
        {# const GDNativeTypePtr *p_args #}
        p_args,
        {# GDNativeTypePtr r_return #}
        {{ "NULL" if meth.return_type.is_nil else "&r_return" }},
        {# int p_argument_count #}
        {{ meth.arguments | length }}
    )
{%     if not meth.return_type.is_nil %}
    return r_return
{%     endif %}
{%   endfor %}
{% endfor %}
