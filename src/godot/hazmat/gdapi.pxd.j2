{%- from 'gdapi.macros.pxd.j2' import
    render_utility_function_signature,
    render_utility_function,
    render_builtin_type_cy_struct,
    render_builtin_type_c_extern,
    render_builtin_constructor_signature,
    render_builtin_destructor_signature,
    render_builtin_method_signature,
    render_builtin_all_functions,
    render_builtin_functions_ptrs
-%}
cimport cython
from libc.stdint cimport *

from .gdnative_interface cimport *


cdef extern from * nogil:
    # Global variables defined in `pythonscript.c`
    # Given `libpythonscript.so` is responsible for initializing the Python
    # interpreter, we are guanteed `pythonscript_gdapi` symbol is always
    # resolved and set to a non-null value \o/
    """
    #include <godot/gdnative_interface.h>
    #ifdef _WIN32
    # define DLL_IMPORT __declspec(dllimport)
    #else
    # define DLL_IMPORT
    #endif
    DLL_IMPORT extern const GDNativeInterface *pythonscript_gdapi;
    DLL_IMPORT GDNativeExtensionClassLibraryPtr pythonscript_gdlibrary;
    """

    cdef const GDNativeInterface *pythonscript_gdapi
    cdef const GDNativeExtensionClassLibraryPtr pythonscript_gdlibrary


##############################################################################
#                            Conversion helpers                              #
##############################################################################


{% include 'gdapi.conversion.pxd.j2' %}


##############################################################################
#                                  Builtins                                  #
##############################################################################


cdef extern from *:
    struct gd_variant_t  # Opaque structure (see the jungle below !)
{% for spec in api["builtins"] if not spec.is_scalar %}
{# Render transparent builtin in the non inlined part for better documentation #}
{%   if spec.is_transparent_c_struct %}
    {{ render_builtin_type_cy_struct(spec) | indent }}
{%   else %}
    struct {{ spec.c_struct_name }}  # Opaque structure (see the jungle below !)
{%   endif %}
{% endfor %}


{% for spec in api["builtins"] if not spec.is_scalar %}


# {{spec.original_name }}: List of inlines functions defined in the jungle below
{% for c in spec.constructors %}
#     {{ render_builtin_constructor_signature(spec, c) }}
{% endfor %}
{% if spec.has_destructor %}
#     {{ render_builtin_destructor_signature(spec) }}
{% endif %}
{% for m in spec.methods %}
#     {{ render_builtin_method_signature(spec, m) }}
{% endfor %}
{# TODO: operators #}
{# {% for o in spec.operators %}
#     {{ render_builtin_method_signature(spec, o) }}
{% endfor %} #}
{% endfor %}


##############################################################################
#                              Utility functions                             #
##############################################################################


# List of inlines functions defined in the jungle below
{% for spec in api["utility_functions"] %}
#     {{ render_utility_function_signature(spec) | indent }}
{% endfor %}


#
#                               ,;               :      L.                                             ,;
#           .    .            f#i       ittttttttEf     EW:        ,ft         .Gt            i      f#i
#  GEEEEEEELDi   Dt         .E#t        fDDK##DDiE#t    E##;       t#E        j#W:           LE    .E#t
#  ,;;L#K;;.E#i  E#i       i#W,            t#E   E#t    E###t      t#E      ;K#f            L#E   i#W,
#     t#E   E#t  E#t      L#D.             t#E   E#t    E#fE#f     t#E    .G#D.            G#W.  L#D.
#     t#E   E#t  E#t    :K#Wfff;           t#E   E#t fi E#t D#G    t#E   j#K;             D#K. :K#Wfff;
#     t#E   E########f. i##WLLLLt          t#E   E#t L#jE#t  f#E.  t#E ,K#f   ,GD;       E#K.  i##WLLLLt
#     t#E   E#j..K#j...  .E#L              t#E   E#t L#LE#t   t#K: t#E  j#Wi   E#t     .E#E.    .E#L
#     t#E   E#t  E#t       f#E:          jfL#E   E#tf#E:E#t    ;#W,t#E   .G#D: E#t    .K#E        f#E:
#     t#E   E#t  E#t        ,WW;         :K##E   E###f  E#t     :K#D#E     ,K#fK#t   .K#D          ,WW;
#     t#E   f#t  f#t         .D#;          G#E   E#K,   E#t      .E##E       j###t  .W#G            .D#;
#      fE    ii   ii           tt           tE   EL     ..         G#E        .G#t :W##########Wt     tt
#       :                                    .   :                  fE          ;; :,,,,,,,,,,,,,.
#                                                                    ,
#
# The following is pretty verbose, here is the tl;dr:
# - Utility functions exposed as both function pointer and nicer inline function
# - Builtins structure definition with both Cython and C in `cdef extern from *`
# - Builtins' constructors/destructor/methods/operators exposed as function pointer
#   and nicer inline function


##############################################################################
#                    Inline defs: Utility functions                          #
##############################################################################
{% for spec in api["utility_functions"] %}


{{ render_utility_function(spec) }}
{% endfor %}


##############################################################################
#                  Inline defs: Builtins C structures                        #
##############################################################################


# Declare builtins structures in `cdef extern` to also provide a C struct definition
# so that they can be used in exported to C functions (i.e. `cdef api` functions)


cdef extern from * nogil:
    """
    struct gd_variant_t {
        char _gd_opaque[{{ api.variant_size }}];
    } gd_variant_t;
    """
    struct gd_variant_t:
        char _gd_opaque[{{ api.variant_size }}]
{% for spec in api["builtins"] if not spec.is_scalar %}


{{ render_builtin_type_c_extern(spec, not spec.is_transparent_c_struct) }}
{% endfor %}
{% for spec in api["builtins"] if not spec.is_scalar %}


##############################################################################
#                  Inline defs: {{ "{:^45}".format(spec.name) }}#
##############################################################################


{{ render_builtin_all_functions(spec) }}
{% endfor %}


##############################################################################
#                  Godot API function pointers on builtins                   #
##############################################################################


{% for spec in api["builtins"] if not spec.is_scalar %}
{{ render_builtin_functions_ptrs(spec) }}
{% endfor %}


##############################################################################
#              Godot API function pointers on variant conversion             #
##############################################################################


{% for spec in api["builtins"] if not spec.is_scalar %}
cdef GDNativeTypeFromVariantConstructorFunc __{{ spec.name }}_from_variant
cdef GDNativeVariantFromTypeConstructorFunc __{{ spec.name }}_to_variant
{% endfor %}
