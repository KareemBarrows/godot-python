{%- from 'gdapi.macros.pxd.j2' import
    render_utility_function_signature,
    render_utility_function,
    render_builtin_type_cy_struct,
    render_builtin_type_c_extern,
    render_builtin_all_functions_signatures,
    render_builtin_all_functions,
    render_builtin_functions_ptrs
-%}
from libc.stdint cimport *

from .gdnative_interface cimport *


cdef extern from * nogil:
    # Global variables defined in `pythonscript.c`
    # Given `libpythonscript.so` is responsible for initializing the Python
    # interpreter, we are guanteed `pythonscript_gdapi` symbol is always
    # resolved and set to a non-null value \o/
    """
    #include <godot/gdnative_interface.h>
    #ifdef _WIN32
    # define DLL_IMPORT __declspec(dllimport)
    #else
    # define DLL_IMPORT
    #endif
    DLL_IMPORT extern const GDNativeInterface *pythonscript_gdapi;
    """

    cdef const GDNativeInterface *pythonscript_gdapi


# The following is pretty verbose, here is the tl;dr:
# - Utility functions exposed as both function pointer and nicer inline function
# - Builtins as C structure (with typed fields if the structure is not opaque)
# - Builtins' constructors/destructor/methods/operators exposed as function pointer
#   and nicer inline function


##############################################################################
#                              Utility functions                             #
##############################################################################


{% for spec in api["utility_functions"] %}
cdef {{ render_utility_function_signature(spec) | indent }}
{% endfor %}


##############################################################################
#                                  Builtins                                  #
##############################################################################


cdef extern from *:
    struct gd_variant_t  # Opaque structure
{% for spec in api["builtins"] if not spec.is_scalar %}
{# Render transparent builtin in the non inlined part for better documentation #}
{%   if spec.is_transparent_c_struct %}
    {{ render_builtin_type_cy_struct(spec) | indent }}
{%   else %}
    struct {{ spec.c_struct_name }}  # Opaque structure
{%   endif %}
{% endfor %}
{% for spec in api["builtins"] if not spec.is_scalar %}


# {{ spec.name }}
{{ render_builtin_all_functions_signatures(spec) }}
{% endfor %}


##############################################################################
#                    Inline defs: Utility functions                          #
##############################################################################
{% for spec in api["utility_functions"] %}


{{ render_utility_function(spec) }}
{% endfor %}


##############################################################################
#                  Inline defs: Builtins C structures                        #
##############################################################################


# Declare builtins structures in `cdef extern` to also provide a C struct definition
# so that they can be used in exported to C functions (i.e. `cdef api` functions)


cdef extern from * nogil:
    """
    struct gd_variant_t {
        char _gd_opaque[{{ api.variant_size }}];
    } gd_variant_t;
    """
    struct gd_variant_t:
        char _gd_opaque[{{ api.variant_size }}]
{% for spec in api["builtins"] if not spec.is_scalar %}


{{ render_builtin_type_c_extern(spec, not spec.is_transparent_c_struct) }}
{% endfor %}
{% for spec in api["builtins"] if not spec.is_scalar %}


##############################################################################
#                  Inline defs: {{ "{:^45}".format(spec.name) }}#
##############################################################################


{{ render_builtin_all_functions(spec) }}
{% endfor %}


##############################################################################
#                  Godot API function pointers on builtins                   #
##############################################################################


{% for spec in api["builtins"] if not spec.is_scalar %}
{{ render_builtin_functions_ptrs(spec) }}
{% endfor %}
