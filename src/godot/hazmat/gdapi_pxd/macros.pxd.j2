#########################################################################
# Render arguments body & signature
#########################################################################


{% macro render_args_signature(args) -%}
{%- for arg in args -%}
{{ arg.type.c_type }}{{ "" if arg.type.is_scalar else "*" }} {{ arg.name }}
{%- if not loop.last %}, {% endif -%}
{%- endfor -%}
{% endmacro %}


{% macro render_args(args) -%}
{%- for arg in args %}
{{ "&" if arg.type.is_scalar else "" }}{{ arg.name }}
{%- if not loop.last %}, {% endif -%}
{%- endfor -%}
{% endmacro %}


#########################################################################
# Utility function
#########################################################################


{# {%- for arg in spec.arguments %}{{ "" if loop.first else ", " }}gd_variant_t *{{arg.name}}{% endfor -%} #}
{# {{- ", " if spec.arguments | length else "" }}gd_variant_t *args) #}
{% macro render_utility_function_signature(spec) -%}
{% if spec.is_vararg %}
{{ "void" if spec.return_type.is_nil else "gd_variant_t" }} gd_{{ spec.name }}(gd_variant_t *args, GDNativeInt args_count)
{%- else %}
{{ "void" if spec.return_type.is_nil else spec.return_type.c_type }} gd_{{ spec.name }}(
    {{- render_args_signature(spec.arguments) -}}
)
{%- endif %}
{%- endmacro %}


{% macro render_utility_function_ptrcall(spec) %}
cdef inline {{ render_utility_function_signature(spec) }}:
{% if (spec.arguments | length) != 0 %}
    cdef GDNativeTypePtr[{{ spec.arguments | length }}] __args = [
        {{- render_args(spec.arguments) -}}
    ]
{% endif %}
{% if not spec.return_type.is_nil %}
    cdef {{ spec.return_type.c_type }} __ret
{% endif %}
    __utility_{{ spec.name }}(
        {# GDNativeTypePtr ret #}
        {{ "NULL" if spec.return_type.is_nil else "&__ret" }},
        {# const GDNativeTypePtr *p_arguments #}
        {{ "NULL" if (spec.arguments | length) == 0 else "__args" }},
        {# int p_argument_count #}
        {{ spec.arguments | length }}
    )
{% if not spec.return_type.is_nil %}
    return __ret
{% endif %}
{% endmacro %}


{% macro render_utility_function_vararg(spec) %}
cdef inline {{ render_utility_function_signature(spec) }}:
{# Godot varargs calling system is a hack: it expects us to provide only #}
{# a single parameter that itself is an array of variant (hence the `&args` #}
{# to pass a `gd_variant_t**` as parameter) whose size is passed in the number #}
{# of parameters fields... Yes this is very confusing stuff, my brain hurts ! #}
{% if spec.return_type.is_nil %}
    __utility_{{ spec.name }}(NULL, <GDNativeTypePtr *>&args, args_count)
{% else %}
    cdef gd_variant_t __ret  # TODO: improve return type !
    __utility_{{ spec.name }}(&__ret, <GDNativeTypePtr *>&args, args_count)
    return __ret
{% endif %}
{% endmacro %}


{% macro render_utility_function(spec) %}
# {{ spec.name }}
cdef GDNativePtrUtilityFunction __utility_{{ spec.name }}
{% if spec.is_vararg %}
{{ render_utility_function_vararg(spec) }}
{% else %}
{{ render_utility_function_ptrcall(spec) }}
{% endif %}
{% endmacro %}


#########################################################################
# Builtin type
#########################################################################


{% macro render_builtin_type_cy_struct(spec) %}
struct {{ spec.c_struct_name }}:
{% if spec.is_transparent_c_struct %}
{%   for member in spec.c_struct_members %}
    {{ member.type.c_type }} {{ member.name }}
{%   endfor %}
{% else %}
    char _gd_opaque[{{ spec.size }}]
{%   endif %}
{% endmacro %}


{% macro render_builtin_type_c_extern(spec, include_cy_struct) %}
cdef extern from * nogil:
    """
    typedef struct {{ spec.c_struct_name }} {
{%   if spec.is_transparent_c_struct %}
{%     for member in spec.c_struct_members %}
        {{ member.type.c_type }} {{ member.name }};
{%     endfor %}
{%   else %}
        char _gd_opaque[{{ spec.size }}];
{%   endif %}
    } {{ spec.c_struct_name }};
    """
{% if include_cy_struct %}
    {{ render_builtin_type_cy_struct(spec) | indent }}
{% endif %}
{% endmacro %}


#########################################################################
# Builtin function pointers
#########################################################################


{% macro render_builtin_functions_ptrs(spec) %}
{% for c in spec.constructors %}
cdef GDNativePtrConstructor __{{ spec.name }}_constructor_{{ c.index }}
{% endfor %}
{% if spec.has_destructor %}
cdef GDNativePtrDestructor __{{ spec.name }}_destructor
{% endif %}
{% for m in spec.methods %}
cdef GDNativePtrBuiltInMethod __{{ spec.name }}_meth_{{ m.name }}
{% endfor %}
{% for o in spec.operators %}
cdef GDNativePtrOperatorEvaluator __{{ spec.name }}_op_{{ o.name }}
{% endfor %}
{% for m in spec.members %}
{%   if not m.is_in_struct %}
cdef GDNativePtrSetter __{{ spec.name }}_get_{{ m.name }}
cdef GDNativePtrGetter __{{ spec.name }}_set_{{ m.name }}
{%   endif %}
{% endfor %}
{% endmacro %}


#########################################################################
# Builtin constructors/destructor
#########################################################################


{% macro render_builtin_from_variant_signature(spec) %}
{%- if spec.is_scalar %}
TODO
{%- else %}
{{ spec.c_struct_name }} {{ spec.c_name_prefix }}_from_variant(gd_variant_t *val)
{%- endif %}
{% endmacro %}


{% macro render_builtin_into_variant_signature(spec) %}
{%- if spec.is_scalar %}
TODO
{%- else %}
gd_variant_t {{ spec.c_name_prefix }}_into_variant({{ spec.c_struct_name }} *val)
{%- endif %}
{% endmacro %}


{% macro render_builtin_object_variant_conversions(spec) %}
cdef inline GDNativeObjectPtr gd_object_from_variant(gd_variant_t *val):
    cdef GDNativeObjectPtr __ret
    __GDObject_from_variant(&__ret, val)
    return __ret

cdef inline gd_variant_t gd_object_into_variant(GDNativeObjectPtr *val):
    cdef gd_variant_t __ret
    __GDObject_into_variant(&__ret, val)
    return __ret
{% endmacro %}


{% macro render_builtin_variant_conversions(spec) %}
{% if spec.is_scalar %}
# TODO
{% else %}
cdef inline {{ render_builtin_from_variant_signature(spec) }}:
    cdef {{ spec.c_struct_name }} __ret
    __{{ spec.name }}_from_variant(&__ret, val)
    return __ret

cdef inline {{ render_builtin_into_variant_signature(spec) }}:
    cdef gd_variant_t __ret
    __{{ spec.name }}_into_variant(&__ret, val)
    return __ret
{% endif %}
{% endmacro %}


{% macro render_builtin_constructor_signature(spec, constructor) -%}
{{ spec.c_struct_name }} {{ constructor.c_name }}({{ render_args_signature(constructor.arguments) }})
{%- endmacro %}


{% macro render_builtin_constructor(spec, constructor) %}
cdef inline {{ render_builtin_constructor_signature(spec, constructor) }}:
    cdef {{ spec.c_struct_name }} obj
{% if (constructor.arguments | length) != 0 %}
    cdef GDNativeTypePtr[{{ constructor.arguments | length }}] p_args = [
        {{- render_args(constructor.arguments) -}}
    ]
{% endif %}
    __{{ spec.name }}_constructor_{{ constructor.index }}(
        &obj,
        {{ "NULL" if (constructor.arguments | length) == 0 else "p_args" }}
    )
    return obj
{% endmacro %}


{% macro render_builtin_destructor_signature(spec) -%}
void {{ spec.c_destructor_name }}({{ spec.c_struct_name }}* self)
{%- endmacro %}


{% macro render_builtin_destructor(spec) %}
cdef inline {{ render_builtin_destructor_signature(spec) }}:
    __{{ spec.name }}_destructor(self)
{% endmacro %}


#########################################################################
# Builtin methods
#########################################################################


{% macro render_builtin_method_signature(spec, meth) -%}
{{ "void" if meth.return_type.is_nil else meth.return_type.c_type }} {{ meth.c_name }}(
    {{- spec.c_struct_name }} *self
{%- if meth.arguments | length %}, {{ render_args_signature(meth.arguments) -}} {% endif -%}
)
{%- endmacro %}


{% macro render_builtin_method(spec, meth) %}
cdef inline {{ render_builtin_method_signature(spec, meth) }}:
{% if (meth.arguments | length) != 0 %}
    cdef GDNativeTypePtr[{{ meth.arguments | length }}] p_args = [
        {{- render_args(meth.arguments) -}}
    ]
{% endif %}
{% if not meth.return_type.is_nil %}
    cdef {{ meth.return_type.c_type }} r_return
{% endif %}
    __{{ spec.name }}_meth_{{ meth.name }}(
        {# GDNativeTypePtr p_base #}
        self,
        {# const GDNativeTypePtr *p_args #}
        {{ "NULL" if (meth.arguments | length) == 0 or "p_args" }},
        {# GDNativeTypePtr r_return #}
        {{ "NULL" if meth.return_type.is_nil else "&r_return" }},
        {# int p_argument_count #}
        {{ meth.arguments | length }}
    )
{% if not meth.return_type.is_nil %}
    return r_return
{% endif %}
{% endmacro %}


{% macro render_builtin_all_functions(spec) %}
{{ render_builtin_variant_conversions(spec) }}
{% for c in spec.constructors %}
{{ render_builtin_constructor(spec, c) }}
{% endfor %}
{% if spec.has_destructor %}
{{ render_builtin_destructor(spec) }}
{% endif %}
{% for m in spec.methods %}
{{ render_builtin_method(spec, m) }}
{% endfor %}
{# TODO: operators #}
{# {% for o in spec.operators %}
{{ render_builtin_method(spec, o) }}
{% endfor %} #}
{% endmacro %}
