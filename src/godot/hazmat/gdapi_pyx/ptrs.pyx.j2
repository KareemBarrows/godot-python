{% macro render_builtin_ptrs(spec) %}
{%   for c in spec.constructors %}
cdef GDNativePtrConstructor __{{ spec.name }}_constructor_{{ c.index }} = pythonscript_gdapi.variant_get_ptr_constructor(
    {{ spec.variant_type_name }}, {{ c.index }}
)
{%   endfor %}

{%   if spec.has_destructor %}
cdef GDNativePtrDestructor __{{ spec.name }}_destructor = pythonscript_gdapi.variant_get_ptr_destructor(
    {{ spec.variant_type_name }}
)
{%   endif %}

{%   for m in spec.methods %}
cdef GDNativePtrBuiltInMethod __{{ spec.name }}_meth_{{ m.name }} = pythonscript_gdapi.variant_get_ptr_builtin_method(
    {{ spec.variant_type_name }}, "{{ m.original_name }}", {{ m.hash }}
)
{%   endfor %}

{%   for o in spec.operators %}
cdef GDNativePtrOperatorEvaluator __{{ spec.name }}_op_{{ o.name }} = pythonscript_gdapi.variant_get_ptr_operator_evaluator(
    {{ o.variant_operator_name }}, {{ spec.variant_type_name }}, {{ o.right_type.variant_type_name }}
)
{%   endfor %}

{%   for m in spec.members %}
{%     if not m.is_in_struct %}
cdef GDNativePtrSetter __{{ spec.name }}_get_{{ m.name }} = pythonscript_gdapi.variant_get_ptr_setter({{ spec.variant_type_name }}, "{{ m.name }}")
cdef GDNativePtrGetter __{{ spec.name }}_set_{{ m.name }} = pythonscript_gdapi.variant_get_ptr_getter({{ spec.variant_type_name }}, "{{ m.name }}")
{%     endif %}
{%   endfor %}
{% endmacro %}


{% macro render_all_builtins_ptrs() %}
{%   for spec in api["builtins"] if not spec.is_scalar %}

#{{ spec.name }}

{{ render_builtin_ptrs(spec) }}
{%   endfor %}
{% endmacro %}


{% macro render_variant_conversions_ptrs() %}
{%   for spec in api["builtins"] %}
cdef GDNativeTypeFromVariantConstructorFunc __{{ spec.name }}_from_variant = pythonscript_gdapi.get_variant_to_type_constructor({{ spec.variant_type_name }})
cdef GDNativeVariantFromTypeConstructorFunc __{{ spec.name }}_into_variant = pythonscript_gdapi.get_variant_from_type_constructor({{ spec.variant_type_name }})
{%   endfor %}
cdef GDNativeTypeFromVariantConstructorFunc __GDObject_from_variant = pythonscript_gdapi.get_variant_to_type_constructor(GDNATIVE_VARIANT_TYPE_OBJECT)
cdef GDNativeVariantFromTypeConstructorFunc __GDObject_into_variant = pythonscript_gdapi.get_variant_from_type_constructor(GDNATIVE_VARIANT_TYPE_OBJECT)
{% endmacro %}


{% macro render_utility_function_ptrs() %}
{%   for spec in api["utility_functions"] %}
# {{ spec.name }}
cdef GDNativePtrUtilityFunction __utility_{{ spec.name }} = pythonscript_gdapi.variant_get_ptr_utility_function("{{ spec.original_name }}", {{ spec.hash }})
{%   endfor %}
{% endmacro %}


{% macro render_all_ptrs() %}
{{ render_all_builtins_ptrs() }}

{{ render_variant_conversions_ptrs() }}

{{ render_utility_function_ptrs() }}

{# TODO: do lazy function pointer initialization ? #}
{% endmacro %}
